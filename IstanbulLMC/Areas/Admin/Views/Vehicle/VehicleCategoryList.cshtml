@model List<VehicleCategory>

@{
    Layout = "_LayoutAdmin";

    GridViewModel gridModel = new GridViewModel
    {
        GridId = "VehicleCategory",
        Model = Model,
        AllowExcelExport = true,
        AllowGrouping = true,
        IsAllowToDelete = false,
        AllowToShowDetails = true,
        Columns = new()
        {
            new() { Field = nameof(VehicleCategory.ID), ColumnType = GridViewModel.GridColumnType.ID, Width = "100", Visiable = false },
            new() { Field = nameof(VehicleCategory.Name), HeaderText = "Name", Width = "100" },
            new() { Field = nameof(VehicleCategory.SeateCount), HeaderText = "Seate Count", Width = "100" },
            new() { Field = nameof(VehicleCategory.SuitcaseCount), HeaderText = "Suitcase Count", Width = "100" },
            new() { Field = nameof(VehicleCategory.MaxDistance), HeaderText = "Max Distance", Width = "100" },
            new() { Field = nameof(VehicleCategory.KMPrice), HeaderText = "KM Price", Width = "100" },
            new() { Field = nameof(VehicleCategory.IsActive), HeaderText = "Active", ColumnType = GridViewModel.GridColumnType.Boolean, Width = "100" },
        },
        toolbarList = new List<string>(){
            "ExcelExport"
        }
    };

    await Html.RenderPartialAsync("_GridView", gridModel);
}
@section Scripts {
    <script>
        function onActionComplete(args) {
            var grid = document.getElementById("VehicleCategory").ej2_instances[0];

            if (args.requestType === 'save') {
                const gridRows = grid.getRows();
                let newlyAddedRowData;

                for (let i = 0; i < gridRows.length; i++) {
                    const row = grid.getRowObjectFromUID(gridRows[i].getAttribute('data-uid'));
                    if (row && !row.isSelected) {
                        console.log(grid.currentViewData);
                        console.log(grid.currentViewData[0]);
                        break;
                    }
                }

                if (newlyAddedRowData) {
                    alert("");
                    $.ajax({
                        url: '/ControllerName/SaveNewRow', // استبدل ControllerName باسم الـ Controller الخاص بك
                        method: 'POST',
                        data: JSON.stringify(newlyAddedRowData),
                        contentType: 'application/json',
                        success: function (response) {
                            // إدراج أي رمز هنا للتعامل مع الاستجابة من الـ Controller بعد الحفظ
                            console.log('تم حفظ السطر:', response);
                        },
                        error: function (error) {
                            console.error('حدث خطأ أثناء محاولة حفظ السطر:', error);
                        }
                    });
                }
            }

            // if (args.requestType === 'save') {
            //     if (grid.pageSettings.currentPage !== 1 && grid.editSettings.newRowPosition === 'Top') {
            //         args.index = (grid.pageSettings.currentPage * grid.pageSettings.pageSize) - grid.pageSettings.pageSize;
            //     } else if (grid.editSettings.newRowPosition === 'Bottom') {
            //         args.index = (grid.pageSettings.currentPage * grid.pageSettings.pageSize) - 1;
            //     }
            // }
        }
    </script>
    <ejs-scripts></ejs-scripts>
}